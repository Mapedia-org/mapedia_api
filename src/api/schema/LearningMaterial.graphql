interface LearningMaterial {
  _id: String!
  tags: [LearningMaterialTag!]
  # rating: Float
  coveredSubTopics(options: LearningMaterialCoveredSubTopicsOptions!): LearningMaterialCoveredSubTopicsResults
  coveredSubTopicsTree: [Topic!]
  showedIn: [Topic!]
  prerequisites: [LearningMaterialPrerequisiteItem!]
  outcomes: [LearningMaterialOutcomeItem!]
  createdBy: User
  createdAt: Date!
}

enum LearningMaterialType {
  Resource
  LearningPath
}

input LearningMaterialCoveredSubTopicsOptions {
  pagination: PaginationOptions
}

type LearningMaterialCoveredSubTopicsResults {
  items: [Topic!]!
}

type LearningMaterialPrerequisiteItem {
  prerequisite: SubGoal!
  strength: Float!
  createdBy: String!
  createdAt: Date!
}

type LearningMaterialOutcomeItem {
  outcome: SubGoal!
  strength: Float!
  createdBy: String!
  createdAt: Date!
}

type Mutation {
  showLearningMaterialInTopic(topicId: String!, learningMaterialId: String!): LearningMaterial!
  hideLearningMaterialFromTopic(topicId: String!, learningMaterialId: String!): LearningMaterial!
  attachLearningMaterialCoversSubTopics(learningMaterialId: String!, subTopicIds: [String!]!): LearningMaterial!
  detachLearningMaterialCoversSubTopics(learningMaterialId: String!, subTopicIds: [String!]!): LearningMaterial!
  rateLearningMaterial(learningMaterialId: String!, value: Float!): LearningMaterial!
  addLearningMaterialPrerequisite(learningMaterialId: String!, prerequisiteSubGoalId: String!): LearningMaterial!
  removeLearningMaterialPrerequisite(
    learningMaterialId: String!
    prerequisiteSubGoalId: String!
  ): LearningMaterial!
  addLearningMaterialOutcome(learningMaterialId: String!, outcomeSubGoalId: String!): LearningMaterial!
  removeLearningMaterialOutcome(learningMaterialId: String!, outcomeSubGoalId: String!): LearningMaterial!
}
