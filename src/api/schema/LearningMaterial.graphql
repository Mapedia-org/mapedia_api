# import Date from 'common/Date.graphql'
# import PaginationOptions from 'common/PaginationOptions.graphql'
# import LearningMaterialTag from 'LearningMaterialTag.graphql'
# import Topic from 'Topic.graphql'
# import LearningMaterialHasPrerequisiteTopic from 'relationships/LearningMaterialHasPrerequisiteTopic.graphql'
# import UserRecommendedLearningMaterial from 'relationships/UserRecommendedLearningMaterial.graphql'
# import User from 'User.graphql'

interface LearningMaterial {
  _id: String!
  name: String!
  description: String
  tags: [LearningMaterialTag!]
  rating: Float
  coveredSubTopics(options: LearningMaterialCoveredSubTopicsOptions!): LearningMaterialCoveredSubTopicsResults
  coveredSubTopicsTree: [Topic!]
  showedIn: [Topic!]
  prerequisites: [LearningMaterialHasPrerequisiteTopic!]
  recommendationsCount: Int
  recommendedBy(limit: Int): [UserRecommendedLearningMaterial!]
  # outcomes: [LearningMaterialOutcomeItem!]
  createdBy: User
  createdAt: Date!
}

enum LearningMaterialType {
  Resource
  LearningPath
}

input LearningMaterialCoveredSubTopicsOptions {
  pagination: PaginationOptions
}

type LearningMaterialCoveredSubTopicsResults {
  items: [Topic!]!
}

type Mutation {
  showLearningMaterialInTopic(topicId: String!, learningMaterialId: String!): LearningMaterial!
  hideLearningMaterialFromTopic(topicId: String!, learningMaterialId: String!): LearningMaterial!
  rateLearningMaterial(learningMaterialId: String!, value: Float!): LearningMaterial!
  # addLearningMaterialOutcome(learningMaterialId: String!, outcomeSubGoalId: String!): LearningMaterial!
  # removeLearningMaterialOutcome(learningMaterialId: String!, outcomeSubGoalId: String!): LearningMaterial!
}
