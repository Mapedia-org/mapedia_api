enum LearningGoalType {
  Roadmap
  SubGoal
}

type LearningGoal implements Topic {
  _id: String!
  key: String!
  type: LearningGoalType!
  name: String!
  description: String
  topicType: TopicType!
  publishedAt: Date
  progress: LearningGoalProgress
  createdBy: User
  domain: LearningGoalBelongsToDomain
  requiredInGoals: [RequiredInGoalItem!]
  requiredSubGoals: [SubGoalItem!] # sub goals vs required goals ?
  started: LearningGoalStarted
  startedBy(options: LearningGoalStartedByOptions!): LearningGoalStartedByResults
}

type LearningGoalProgress {
  level: Float!
}
type LearningGoalStarted {
  startedAt: Date!
}

input LearningGoalStartedByOptions {
  pagination: PaginationOptions
}

type LearningGoalStartedByResults {
  items: [LearningGoalStartedByItem!]!
  count: Int!
}

type LearningGoalStartedByItem {
  startedAt: Date!
  user: User!
}

type RequiredInGoalItem {
  goal: LearningGoal!
  strength: Float!
}

type SubGoalItem {
  subGoal: SubGoal!
  strength: Float!
}

union SubGoal = LearningGoal | Concept

input CreateLearningGoalPayload {
  name: String!
  type: LearningGoalType!
  key: String
  description: String
  public: Boolean
}

input AddLearningGoalToDomainPayload {
  contextualName: String!
  contextualKey: String
  type: LearningGoalType!
  description: String
  public: Boolean
}

input UpdateLearningGoalPayload {
  name: String
  key: String
  type: LearningGoalType
  description: String
  public: Boolean
}

# input AttachLearningGoalToDomainPayload {
#   contextualKey: String
# }

type DeleteLearningGoalMutationResult {
  _id: String!
  success: Boolean!
}

type AttachLearningGoalToDomainResult {
  domain: Domain!
  learningGoal: LearningGoal!
}

# type DetachLearningGoalFromDomainResult {
#   domain: Domain!
#   learningGoal: LearningGoal!
# }

type DomainAndLearningGoalResult {
  domain: Domain!
  learningGoal: LearningGoal!
}

input SearchLearningGoalsOptions {
  query: String
  pagination: PaginationOptions!
}

type SearchLearningGoalsResult {
  items: [LearningGoal!]!
}
input AttachLearningGoalRequiresSubGoalPayload {
  strength: Float
}
type AttachLearningGoalRequiresSubGoalResult {
  learningGoal: LearningGoal!
  subGoal: SubGoal!
}

type DetachLearningGoalRequiresSubGoalResult {
  learningGoal: LearningGoal!
  subGoal: SubGoal!
}

type LearningGoalStartedResult {
  currentUser: CurrentUser!
  learningGoal: LearningGoal!
}

type Query {
  searchLearningGoals(options: SearchLearningGoalsOptions!): SearchLearningGoalsResult!
  getLearningGoalByKey(key: String!): LearningGoal!
  getDomainLearningGoalByKey(domainKey: String!, contextualLearningGoalKey: String!): DomainAndLearningGoalResult!
}

type Mutation {
  addLearningGoalToDomain(domainId: String!, payload: AddLearningGoalToDomainPayload!): DomainAndLearningGoalResult!
  createLearningGoal(payload: CreateLearningGoalPayload!): LearningGoal!
  # attachLearningGoalToDomain(
  #   learningGoalId: String!
  #   domainId: String!
  #   payload: AttachLearningGoalToDomainPayload!
  # ): DomainAndLearningGoalResult!
  # detachLearningGoalFromDomain(learningGoalId: String!, domainId: String!): DomainAndLearningGoalResult!
  updateLearningGoal(_id: String!, payload: UpdateLearningGoalPayload!): LearningGoal!
  deleteLearningGoal(_id: String!): DeleteLearningGoalMutationResult!
  attachLearningGoalRequiresSubGoal(
    learningGoalId: String!
    subGoalId: String!
    payload: AttachLearningGoalRequiresSubGoalPayload!
  ): AttachLearningGoalRequiresSubGoalResult!
  detachLearningGoalRequiresSubGoal(
    learningGoalId: String!
    subGoalId: String!
  ): DetachLearningGoalRequiresSubGoalResult!
  startLearningGoal(learningGoalId: String!): LearningGoalStartedResult!
}
