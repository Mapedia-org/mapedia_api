type LearningGoal {
  _id: String!
  key: String!
  name: String!
  description: String
  domains: [LearningGoalsDomainsItem!]
}

input CreateLearningGoalPayload {
  name: String!
  key: String
  description: String
}

input UpdateLearningGoalPayload {
  name: String
  key: String
  description: String
}

type LearningGoalsDomainsItem {
  domain: Domain!
}

type DeleteLearningGoalMutationResult {
  _id: String!
  success: Boolean!
}

type AddLearningGoalToDomainResult {
  domain: Domain!
  learningGoal: LearningGoal!
}

type AttachLearningGoalToDomainResult {
  domain: Domain!
  learningGoal: LearningGoal!
}

type DetachLearningGoalFromDomainResult {
  domain: Domain!
  learningGoal: LearningGoal!
}

type Query {
  getLearningGoalByKey(key: String!): LearningGoal!
}

type Mutation {
  addLearningGoalToDomain(domainId: String!, payload: CreateLearningGoalPayload!): AddLearningGoalToDomainResult!
  attachLearningGoalToDomain(learningGoalId: String!, domainId: String!): AttachLearningGoalToDomainResult!
  detachLearningGoalFromDomain(learningGoalId: String!, domainId: String!): DetachLearningGoalFromDomainResult!
  createLearningGoal(payload: CreateLearningGoalPayload!): LearningGoal!
  updateLearningGoal(_id: String!, payload: UpdateLearningGoalPayload!): LearningGoal!
  deleteLearningGoal(_id: String!): DeleteLearningGoalMutationResult!
}
