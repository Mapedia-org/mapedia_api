enum ResourceMediaType {
  video
  text
  audio
}

enum ResourceType {
  article
  article_series
  tutorial
  introduction
  course
  guide
  podcast
  podcast_series
  other
}

# enum PedagogicalApproach {
#   practical
#   theoretical
#   intuitive
#   gamified
#   visual
#   interactive
#   abstract
#   detailed
# }
# polymorphic ? By type or just internal / external ?
# what info in the relationships ? approach taken ?
# should just be a wrapper ?

type ConsumedResource {
  openedAt: Date
  consumedAt: Date
}

type Resource {
  _id: String!
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  tags: [ResourceTag!]
  url: String!
  upvotes: Int
  rating: Float
  description: String
  durationMs: Int
  consumed: ConsumedResource
  creator: User
  coveredConcepts(options: ResourceCoveredConceptsOptions!): ResourceCoveredConceptsResults
  domains(options: ResourceDomainsOptions!): ResourceDomainsResults
}

input ResourceDomainsOptions {
  pagination: PaginationOptions
}

type ResourceDomainsResults {
  items: [Domain!]!
}

input ResourceCoveredConceptsOptions {
  pagination: PaginationOptions
}

type ResourceCoveredConceptsResults {
  items: [Concept!]!
}

input CreateResourcePayload {
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  url: String!
  description: String
  durationMs: Int
  tags: [String!] # ?
}

input UpdateResourcePayload {
  name: String
  type: ResourceType
  mediaType: ResourceMediaType
  url: String
  description: String
  durationMs: Int
}

input SetResourcesConsumedPayloadResourcesField {
  resourceId: String!
  consumed: Boolean
  opened: Boolean # or action: String! ?
}
input SetResourcesConsumedPayload {
  resources: [SetResourcesConsumedPayloadResourcesField!]!
}

enum ResourceVoteValue {
  up
  down
}

type DeleteResourceResponse {
  _id: String!
  success: Boolean!
}

# External -> Url + abstract/description if possible ? E.g. youtube description
# Internal ->
# Polymorphic relationship ?
# approach taken
# mapping to concepts
# duration estimation

type Query {
  getResourceById(id: String!): Resource!
}

type Mutation {
  createResource(payload: CreateResourcePayload!): Resource!
  updateResource(_id: String!, payload: UpdateResourcePayload!): Resource!
  deleteResource(_id: String!): DeleteResourceResponse!
  addResourceToDomain(domainId: String!, payload: CreateResourcePayload!): Resource!
  attachResourceToDomain(domainId: String!, resourceId: String!): Resource!
  attachResourceCoversConcepts(resourceId: String!, conceptIds: [String!]!): Resource!
  detachResourceCoversConcepts(resourceId: String!, conceptIds: [String!]!): Resource!
  setResourcesConsumed(payload: SetResourcesConsumedPayload!): [Resource!]!
  voteResource(resourceId: String!, value: ResourceVoteValue!): Resource!
  rateResource(resourceId: String!, value: Float!): Resource!
}
