enum ResourceMediaType {
  video
  text
  audio
  interactive_content
}

enum ResourceType {
  article
  article_series
  course
  podcast
  podcast_series
  youtube_video
  youtube_video_series
  book
  talk
  documentary
  website
  video_game
  infographic
  tweet
  other
}

type ConsumedResource {
  openedAt: Date
  consumedAt: Date
}

type Resource implements LearningMaterial {
  _id: String!
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  tags: [LearningMaterialTag!]
  url: String!
  upvotes: Int
  rating: Float
  description: String
  durationSeconds: Int
  consumed: ConsumedResource
  creator: User
  coveredConcepts(options: LearningMaterialCoveredConceptsOptions!): LearningMaterialCoveredConceptsResults
  coveredConceptsByDomain: [LearningMaterialCoveredConceptsByDomainItem!]
  domains: [Domain!]
  subResources: [Resource!]
  parentResources: [Resource!]
  subResourceSeries: [Resource!]
  seriesParentResource: Resource
  nextResource: Resource
  previousResource: Resource
}

input ResourceDomainsOptions {
  pagination: PaginationOptions
}

type ResourceDomainsResults {
  items: [Domain!]!
}

input ResourceCoveredConceptsOptions {
  pagination: PaginationOptions
}

type ResourceCoveredConceptsResults {
  items: [Concept!]!
}

type ResourceCoveredConceptsByDomainItem {
  domain: Domain!
  coveredConcepts: [Concept!]!
}

input CreateResourcePayload {
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  url: String!
  description: String
  durationSeconds: Int
  tags: [String!] # ?
}

input UpdateResourcePayload {
  name: String
  type: ResourceType
  mediaType: ResourceMediaType
  url: String
  description: String
  durationSeconds: Int
}

input SetResourcesConsumedPayloadResourcesField {
  resourceId: String!
  consumed: Boolean
  opened: Boolean
}

input SetResourcesConsumedPayload {
  resources: [SetResourcesConsumedPayloadResourcesField!]!
}

enum ResourceVoteValue {
  up
  down
}

type DeleteResourceResponse {
  _id: String!
  success: Boolean!
}

type SubResourceCreatedResult {
  parentResource: Resource!
  subResource: Resource!
}

type SubResourceSeriesCreatedResult {
  seriesParentResource: Resource!
  subResource: Resource!
}

input SearchResourcesOptions {
  pagination: PaginationOptions
}

type SearchResourcesResult {
  items: [Resource!]!
}

type Query {
  searchResources(query: String!, options: SearchResourcesOptions!): SearchResourcesResult!
  getResourceById(id: String!): Resource!
}

type Mutation {
  createResource(payload: CreateResourcePayload!): Resource!
  updateResource(_id: String!, payload: UpdateResourcePayload!): Resource!
  deleteResource(_id: String!): DeleteResourceResponse! # TODO: if part of series, detach are retach previous and next
  addResourceToDomain(domainId: String!, payload: CreateResourcePayload!): Resource!
  setResourcesConsumed(payload: SetResourcesConsumedPayload!): [Resource!]!
  voteResource(resourceId: String!, value: ResourceVoteValue!): Resource!
  addSubResource(parentResourceId: String!, subResourceId: String!): SubResourceCreatedResult!
  createSubResourceSeries(parentResourceId: String!, subResourceId: String!): SubResourceSeriesCreatedResult!
  addSubResourceToSeries(
    parentResourceId: String!
    previousResourceId: String!
    subResourceId: String!
  ): SubResourceSeriesCreatedResult!
}
