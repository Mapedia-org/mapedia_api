enum ResourceMediaType {
  video
  text
  audio
  image
  interactive_content
}

enum ResourceType {
  article
  article_series
  course
  podcast
  podcast_episode
  youtube_video
  youtube_playlist
  online_book
  book
  research_paper
  talk
  documentary
  website
  video_game
  infographic
  tweet
  exercise
  quizz
  project
  other
}

type ConsumedResource {
  openedAt: Date
  lastOpenedAt: Date
  consumedAt: Date
}

type Resource implements LearningMaterial {
  _id: String!
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  tags: [LearningMaterialTag!]
  url: String!
  upvotes: Int
  # rating: Float
  description: String
  durationSeconds: Int
  consumed: ConsumedResource
  subResources: [Resource!]
  parentResources: [Resource!]
  subResourceSeries: [Resource!]
  seriesParentResource: Resource
  nextResource: Resource
  previousResource: Resource
  coveredSubTopics(options: LearningMaterialCoveredSubTopicsOptions!): LearningMaterialCoveredSubTopicsResults
  coveredSubTopicsTree: [Topic!]
  showedIn: [Topic!]
  prerequisites: [LearningMaterialPrerequisiteItem!]
  outcomes: [LearningMaterialOutcomeItem!]
  createdBy: User
  createdAt: Date!
}

# input ResourceDomainsOptions {
#   pagination: PaginationOptions
# }

# type ResourceDomainsResults {
#   items: [Domain!]!
# }

# input ResourceCoveredConceptsOptions {
#   pagination: PaginationOptions
# }

# type ResourceCoveredConceptsResults {
#   items: [Concept!]!
# }

# type ResourceCoveredConceptsByDomainItem {
#   domain: Domain!
#   coveredConcepts: [Concept!]!
# }

# input DomainAndCoveredConcepts {
#   domainId: String!
#   conceptsIds: [String!]!
# }

input CreateSubResourcePayload {
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  url: String!
  description: String
  durationSeconds: Int
  tags: [String!]
  # domainsAndCoveredConcepts: [DomainAndCoveredConcepts!]
  # prerequisitesLearningGoalsIds: [String!]
  # outcomesLearningGoalsIds: [String!] TODO
}

input CreateResourcePayload {
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  url: String!
  description: String
  durationSeconds: Int
  tags: [String!]
  # domainsAndCoveredConcepts: [DomainAndCoveredConcepts!]
  # prerequisitesLearningGoalsIds: [String!]
  # outcomesLearningGoalsIds: [String!]
  subResourceSeries: [CreateSubResourcePayload!]
}

input UpdateResourcePayload {
  name: String
  type: ResourceType
  mediaType: ResourceMediaType
  url: String
  description: String
  durationSeconds: Int
}

input SetResourcesConsumedPayloadResourcesField {
  resourceId: String!
  consumed: Boolean
  opened: Boolean
}

input SetResourcesConsumedPayload {
  resources: [SetResourcesConsumedPayloadResourcesField!]!
}

enum ResourceVoteValue {
  up
  down
}

type DeleteResourceResponse {
  _id: String!
  success: Boolean!
}

type SubResourceCreatedResult {
  parentResource: Resource!
  subResource: Resource!
}

type SubResourceSeriesCreatedResult {
  seriesParentResource: Resource!
  subResource: Resource!
}

input SearchResourcesOptions {
  pagination: PaginationOptions
}

type SearchResourcesResult {
  items: [Resource!]!
}

type SubResourceExtractedData {
  name: String!
  type: ResourceType!
  mediaType: ResourceMediaType!
  url: String!
  description: String
  durationSeconds: Int
}
type ResourceData {
  name: String
  type: ResourceType
  mediaType: ResourceMediaType
  description: String
  durationSeconds: Int
  subResourceSeries: [SubResourceExtractedData!]
}

type AnalyzeResourceUrlResult {
  resourceData: ResourceData
}

type Query {
  searchResources(query: String!, options: SearchResourcesOptions!): SearchResourcesResult!
  getResourceById(id: String!): Resource!
  analyzeResourceUrl(url: String!): AnalyzeResourceUrlResult!
}

type Mutation {
  createResource(payload: CreateResourcePayload!): Resource!
  updateResource(_id: String!, payload: UpdateResourcePayload!): Resource!
  deleteResource(_id: String!): DeleteResourceResponse! # TODO: if part of series, detach are retach previous and next
  setResourcesConsumed(payload: SetResourcesConsumedPayload!): [Resource!]!
  voteResource(resourceId: String!, value: ResourceVoteValue!): Resource!
  addSubResource(parentResourceId: String!, subResourceId: String!): SubResourceCreatedResult!
  createSubResourceSeries(parentResourceId: String!, subResourceId: String!): SubResourceSeriesCreatedResult!
  addSubResourceToSeries(
    parentResourceId: String!
    previousResourceId: String!
    subResourceId: String!
  ): SubResourceSeriesCreatedResult!
}
