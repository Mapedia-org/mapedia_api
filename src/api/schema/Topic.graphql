# import PaginationOptions from 'common/PaginationOptions.graphql'
# import LearningMaterial, LearningMaterialType from 'LearningMaterial.graphql'
# import TopicIsPartOfTopic from 'relationships/TopicIsPartOfTopic.graphql'
# import TopicIsSubTopicOfTopic from 'relationships/TopicIsSubTopicOfTopic.graphql'
# import TopicHasPrerequisiteTopic from 'relationships/TopicHasPrerequisiteTopic.graphql'
# import User from 'User.graphql'
# import Date from 'common/Date.graphql'
# import ResourceType from 'Resource.graphql'
# import TopicType from 'TopicType.graphql'

type Topic {
  _id: String!
  name: String!
  key: String!
  aliases: [String!]
  context: String
  level: Float
  description: String
  descriptionSourceUrl: String
  isDisambiguation: Boolean
  contextTopic: Topic
  wikipediaPageUrl: String
  topicTypes: [TopicType!]
  otherContextsTopics: [Topic!]
  disambiguationTopic: Topic
  contextualisedTopics: [Topic!]
  parentTopic: Topic
  partOfTopics: [TopicIsPartOfTopic!]
  subTopics: [TopicIsSubTopicOfTopic!]
  subTopicsTotalCount: Int
  learningMaterials(options: TopicLearningMaterialsOptions!): TopicLearningMaterialsResults
  learningMaterialsTotalCount: Int
  # learningGoals: [LearningGoalBelongsToDomain!] => TODO
  # progress | completion
  # known: KnownTopic TODO -> change schema, both progress and wether marked as known or not
  prerequisites: [TopicHasPrerequisiteTopic!]
  followUps: [TopicHasPrerequisiteTopic!]
  createdBy: User
  createdAt: Date!
}

input SearchTopicsOptions {
  query: String!
  pagination: PaginationOptions!
  # filter: SearchTopicsFilterOptions
}

type SearchTopicsResult {
  items: [Topic!]!
}

# learning materials
enum TopicLearningMaterialsSortingType {
  recommended
  rating
  newest
}

input TopicLearningMaterialsFilterOptions {
  resourceTypeIn: [ResourceType!]
  completedByUser: Boolean!
  learningMaterialTypeIn: [LearningMaterialType!]
}

input TopicLearningMaterialsOptions {
  sortingType: TopicLearningMaterialsSortingType!
  query: String
  filter: TopicLearningMaterialsFilterOptions!
}

type TopicLearningMaterialsResults {
  items: [LearningMaterial!]!
}

# prereq
# type TopicHasPrerequisiteTopicItem {
#   topic: Topic!
#   relationship: TopicHasPrerequisiteTopic!
# }

type CheckTopicKeyAvailabilityResult {
  available: Boolean!
  existingTopic: Topic
}

# progress
type KnownTopic {
  level: Float!
}

# mutation types

input CreateTopicPayload {
  name: String!
  key: String!
  topicTypes: [String!]!
  prerequisitesTopicsIds: [String!]!
  description: String
  descriptionSourceUrl: String
  wikipediaPageUrl: String
  aliases: [String!]
  level: Float
}

input CreateTopicContextOptions {
  disambiguationTopicId: String!
  contextTopicId: String!
}

input UpdateTopicPayload {
  name: String
  key: String
  description: String
  descriptionSourceUrl: String
  wikipediaPageUrl: String
  aliases: [String!]
  level: Float
}

type DeleteTopicResponse {
  _id: String!
  success: Boolean!
}

input SetTopicKnownPayloadTopicsField {
  topicId: String!
  level: Float
}

input SetTopicsKnownPayload {
  topics: [SetTopicKnownPayloadTopicsField!]!
}

type GetTopicValidContextsFromSameName {
  validContexts: [Topic!]
  validSameNameTopicContexts: [Topic!]
}

type GetTopicValidContextsFromDisambiguation {
  validContexts: [Topic!]
}

type GetTopicValidContextsResult {
  validContexts: [Topic!]
}

input PullDescriptionsQueryOptions {
  name: String!
  aliases: [String!]
  parentTopicName: String
  contextName: String
}

enum PulledDescriptionSourceName {
  wikipedia
  google
}
type PulledDescription {
  sourceUrl: String!
  sourceName: PulledDescriptionSourceName!
  resultName: String
  description: String!
}
type Query {
  getTopicById(topicId: String!): Topic!
  getTopicByKey(topicKey: String!): Topic!
  searchTopics(options: SearchTopicsOptions!): SearchTopicsResult!
  searchSubTopics(topicId: String!, options: SearchTopicsOptions!): SearchTopicsResult!
  autocompleteTopicName(partialName: String!): SearchTopicsResult!
  checkTopicKeyAvailability(key: String!): CheckTopicKeyAvailabilityResult!
  getTopicValidContexts(parentTopicId: String!, topicId: String!): GetTopicValidContextsResult!
  getTopicValidContextsFromSameName(
    parentTopicId: String!
    existingSameNameTopicId: String!
  ): GetTopicValidContextsFromSameName!
  getTopicValidContextsFromDisambiguation(
    parentTopicId: String!
    disambiguationTopicId: String!
  ): GetTopicValidContextsFromDisambiguation!
  pullTopicDescriptions(queryOptions: PullDescriptionsQueryOptions!): [PulledDescription!]!
}

type Mutation {
  createTopic(payload: CreateTopicPayload!): Topic!
  createDisambiguationFromTopic(existingTopicId: String!, existingTopicContextTopicId: String!): Topic!
  addSubTopic(parentTopicId: String!, payload: CreateTopicPayload!, contextOptions: CreateTopicContextOptions): Topic!
  updateTopic(topicId: String!, payload: UpdateTopicPayload!): Topic!
  deleteTopic(topicId: String!): DeleteTopicResponse!
  setTopicsKnown(payload: SetTopicsKnownPayload!): [Topic!]! # TODO: better API, one mutation ?
  setTopicsUnknown(topicIds: [String!]!): [Topic!]!
  updateTopicContext(topicId: String!, contextTopicId: String!): Topic!
}
