type Topic {
  _id: String!
  name: String!
  key: String!
  description: String
  parentTopic: Topic
  subTopics(options: TopicSubTopicsOptions!): [TopicIsSubTopicOfTopic!]
  subTopicsTotalCount: Int
  learningMaterials(options: TopicLearningMaterialsOptions!): TopicLearningMaterialsResults
  learningMaterialsTotalCount: Int
  # learningGoals: [LearningGoalBelongsToDomain!] => TODO
  # progress | completion
  # known: KnownTopic TODO -> change schema, both progress and wether marked as known or not
  prerequisites: [TopicHasPrerequisiteTopicItem!]
  followUps: [TopicHasPrerequisiteTopicItem!]
  createdBy: User
  createdAt: Date!
}

enum TopicSubTopicsSortingType {
  index
}

input TopicSubTopicsSortingOptions {
  type: TopicSubTopicsSortingType!
  direction: SortingDirection!
}

input TopicSubTopicsOptions {
  sorting: TopicSubTopicsSortingOptions!
}

# input SearchTopicsFilterOptions {
#   topicTypeIn: [TopicType!]
# }

input SearchTopicsOptions {
  query: String!
  pagination: PaginationOptions!
  # filter: SearchTopicsFilterOptions
}

type SearchTopicsResult {
  items: [Topic!]!
}

# learning materials
enum TopicLearningMaterialsSortingType {
  recommended
  rating
  newest
}

input TopicLearningMaterialsFilterOptions {
  # resourceTypeIn: [ResourceType!]
  completedByUser: Boolean!
  # learningMaterialTypeIn: [LearningMaterialType!] TODO
}

input TopicLearningMaterialsOptions {
  sortingType: TopicLearningMaterialsSortingType!
  query: String
  filter: TopicLearningMaterialsFilterOptions!
}

type TopicLearningMaterialsResults {
  items: [LearningMaterial!]!
}

# prereq
type TopicHasPrerequisiteTopicItem {
  topic: Topic!
  relationship: TopicHasPrerequisiteTopic!
}

type CheckTopicKeyAvailabilityResult {
  available: Boolean!
  existingTopic: Topic
}

# progress
type KnownTopic {
  level: Float!
}

# mutation types

input CreateTopicPayload {
  name: String!
  key: String!
  description: String
}

input UpdateTopicPayload {
  name: String
  key: String
  description: String
}

type DeleteTopicResponse {
  _id: String!
  success: Boolean!
}

input SetTopicKnownPayloadTopicsField {
  topicId: String!
  level: Float
}

input SetTopicsKnownPayload {
  topics: [SetTopicKnownPayloadTopicsField!]!
}

type Query {
  getTopicById(topicId: String!): Topic!
  getTopicByKey(topicKey: String!): Topic!
  searchTopics(options: SearchTopicsOptions!): SearchTopicsResult!
  searchSubTopics(topicId: String!, options: SearchTopicsOptions!): SearchTopicsResult!
  checkTopicKeyAvailability(key: String!): CheckTopicKeyAvailabilityResult!
}


type Mutation {
  createTopic(payload: CreateTopicPayload!): Topic!
  updateTopic(id: String!, payload: UpdateTopicPayload!): Topic!
  deleteTopic(id: String!): DeleteTopicResponse!
  setTopicsKnown(payload: SetTopicsKnownPayload!): [Topic!]! # TODO: better API, one mutation ?
  setTopicsUnknown(topicIds: [String!]!): [Topic!]!
}