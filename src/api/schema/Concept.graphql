# Has dependencies + is depended upon with/by other concepts
# Represents an atomic knowledge, something that can be understood
# learning content cover one or several concepts

type Concept implements Topic {
  _id: String!
  key: String!
  name: String!
  description: String
  topicType: TopicType!
  domain: Domain
  coveredByResources(options: ConceptCoveredByResourcesOptions!): ConceptCoveredByResourcesResults
  known: KnownConcept
  referencingConcepts: [ConceptReferencesConceptItem!]
  referencedByConcepts: [ConceptReferencesConceptItem!]
  subConcepts: [ConceptBelongsToConceptItem!]
  parentConcepts: [ConceptBelongsToConceptItem!]
}

type KnownConcept {
  level: Float!
}

type ConceptReferencesConceptItem {
  concept: Concept!
  relationship: ConceptReferencesConcept!
}

type ConceptBelongsToConceptItem {
  concept: Concept!
  relationship: ConceptBelongsToConcept!
}

input ConceptCoveredByResourcesOptions {
  pagination: PaginationOptions
}

type ConceptCoveredByResourcesResults {
  items: [Resource!]!
}

input AddConceptToDomainPayload {
  key: String
  name: String!
  description: String
  index: Float
}

input UpdateConceptPayload {
  key: String
  name: String
  description: String
}

input SetConceptKnownPayloadConceptsField {
  conceptId: String!
  level: Float
}
input SetConceptKnownPayload {
  concepts: [SetConceptKnownPayloadConceptsField!]!
}

type DeleteConceptResult {
  success: Boolean!
  _id: String!
  domain: Domain
}

type Query {
  getConcept(_id: String!): Concept!
  getDomainConceptByKey(domainKey: String!, conceptKey: String!): Concept!
}

type Mutation {
  addConceptToDomain(domainId: String!, payload: AddConceptToDomainPayload!): Concept!
  updateConcept(_id: String!, payload: UpdateConceptPayload!): Concept!
  deleteConcept(_id: String!): DeleteConceptResult!
  setConceptsKnown(payload: SetConceptKnownPayload!): [Concept!]!
  setConceptsUnknown(conceptIds: [String!]!): [Concept!]!
}
