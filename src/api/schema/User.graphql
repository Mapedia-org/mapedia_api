enum UserRole {
  ADMIN
  CONTRIBUTOR
  USER
}

type User {
  _id: String!
  email: String!
  displayName: String!
  role: UserRole!
  key: String!
  articles(options: ListArticlesOptions!): ListArticlesResult
}

input UserLearningPathsOptions {
  pagination: PaginationOptions
}

type CurrentUser {
  _id: String!
  email: String!
  displayName: String!
  key: String!
  role: UserRole!
  articles(options: ListArticlesOptions!): ListArticlesResult
  # private stuff here
  createdLearningPaths(options: UserLearningPathsOptions!): [LearningPath!]
  startedLearningPaths(options: UserLearningPathsOptions!): [LearningPathStartedItem!]
}

type LearningPathStartedItem {
  learningPath: LearningPath!
  startedAt: Date!
  completedAt: Date
}

type LoginResponse {
  currentUser: CurrentUser!
  jwt: String!
  redirectUrl: String
}

type Query {
  currentUser: CurrentUser
  getUser(key: String!): User!
}

input RegisterPayload {
  key: String!
  displayName: String!
  email: String!
  password: String!
}

input RegisterGooglePayload {
  key: String!
  displayName: String!
  idToken: String!
}

input AdminUpdateUserPayload {
  displayName: String
  key: String
  email: String
  role: UserRole
  active: Boolean
}

input DiscourseSSO {
  sig: String!
  sso: String!
}

type VerifyEmailResponse {
  email: String!
}

type Mutation {
  login(email: String!, password: String!, discourseSSO: DiscourseSSO): LoginResponse!
  loginGoogle(idToken: String!, discourseSSO: DiscourseSSO): LoginResponse!
  register(payload: RegisterPayload!): CurrentUser!
  registerGoogle(payload: RegisterGooglePayload!): CurrentUser!
  verifyEmailAddress(token: String!): VerifyEmailResponse!
  adminUpdateUser(id: String!, payload: AdminUpdateUserPayload!): User!
}
