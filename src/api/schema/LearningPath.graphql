# import PaginationOptions from 'common/PaginationOptions.graphql'
# import Resource from 'Resource.graphql'
# import Topic from 'Topic.graphql'
# import Date from 'common/Date.graphql'
# import LearningMaterial, LearningMaterialCoveredSubTopicsOptions, LearningMaterialCoveredSubTopicsResults from 'LearningMaterial.graphql'
# import LearningMaterialTag from 'LearningMaterialTag.graphql'
# import LearningMaterialHasPrerequisiteTopic from 'relationships/LearningMaterialHasPrerequisiteTopic.graphql'
# import User, CurrentUser from 'User.graphql'

type LearningPath implements LearningMaterial {
  _id: String!
  key: String!
  name: String!
  description: String
  public: Boolean!
  durationSeconds: Int
  resourceItems: [LearningPathResourceItem!]
  complementaryResources: [Resource!]
  tags: [LearningMaterialTag!]
  rating: Float
  started: LearningPathStarted
  startedBy(options: LearningPathStartedByOptions!): LearningPathStartedByResults
  coveredSubTopics(options: LearningMaterialCoveredSubTopicsOptions!): LearningMaterialCoveredSubTopicsResults
  coveredSubTopicsTree: [Topic!]
  showedIn: [Topic!]
  prerequisites: [LearningMaterialHasPrerequisiteTopic!]
  createdBy: User
  createdAt: Date!
}

input LearningPathStartedByOptions {
  pagination: PaginationOptions
}

type LearningPathStartedByResults {
  items: [LearningPathStartedByItem!]!
  count: Int!
}

type LearningPathStartedByItem {
  user: User!
  startedAt: Date!
  completedAt: Date
}

type LearningPathResourceItem {
  resource: Resource!
  learningPathId: String!
  description: String
}

type LearningPathStarted {
  startedAt: Date!
  completedAt: Date
}

input CreateLearningPathPayload {
  name: String!
  key: String
  description: String
  public: Boolean
  durationSeconds: Int
  tags: [String!]
  resourceItems: [CreateLearningPathResourceItem!]!
}

input CreateLearningPathResourceItem {
  resourceId: String!
  description: String
}

type DeleteLearningPathResult {
  success: Boolean!
  _id: String!
}

type ComplementaryResourceUpdatedResult {
  resource: Resource!
  learningPath: LearningPath!
}

input UpdateLearningPathPayload {
  name: String
  public: Boolean
  description: String
  durationSeconds: Int
  resourceItems: [CreateLearningPathResourceItem!]
}

type LearningPathStartedResult {
  user: CurrentUser!
  learningPath: LearningPath!
}

type LearningPathCompletedResult {
  user: CurrentUser!
  learningPath: LearningPath!
}

type Mutation {
  createLearningPath(payload: CreateLearningPathPayload!): LearningPath!
  updateLearningPath(learningPathId: String!, payload: UpdateLearningPathPayload!): LearningPath!
  deleteLearningPath(learningPathId: String!): DeleteLearningPathResult!
  addComplementaryResourceToLearningPath(
    learningPathId: String!
    resourceId: String!
  ): ComplementaryResourceUpdatedResult!
  removeComplementaryResourceFromLearningPath(
    learningPathId: String!
    resourceId: String!
  ): ComplementaryResourceUpdatedResult!
  startLearningPath(learningPathId: String!): LearningPathStartedResult!
  completeLearningPath(learningPathId: String!, completed: Boolean!): LearningPathCompletedResult!
}

type Query {
  getLearningPathById(learningPathId: String!): LearningPath!
  getLearningPathByKey(learningPathKey: String!): LearningPath!
}
