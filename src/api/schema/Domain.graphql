type Domain {
  _id: ID!
  name: String!
  key: String!
  description: String
  concepts(options: DomainConceptsOptions!): DomainConceptsResults
  resources(options: DomainResourcesOptions!): DomainResourcesResults
  conceptList: [ConceptBelongsToDomain]
}

# Domain concepts
enum DomainConceptSortingEntities {
  concept
  relationship
}

enum DomainConceptSortingFields {
  _id
  index
}

input DomainConceptSortingOptions {
  entity: DomainConceptSortingEntities!
  field: DomainConceptSortingFields!
  direction: SortingDirection!
}

input DomainConceptsOptions {
  pagination: PaginationOptions
  sorting: DomainConceptSortingOptions
}

type DomainConceptsItem {
  concept: Concept!
  relationship: ConceptBelongsToDomain!
}

type DomainConceptsResults {
  items: [DomainConceptsItem!]!
}

# Domain resources
enum DomainResourcesSortingType {
  relevance
  creation_date
}

input DomainResourcesSortingOptions {
  type: DomainResourcesSortingType!
  direction: SortingDirection!
}

input DomainResourcesOptions {
  sorting: DomainResourcesSortingOptions
  pagination: PaginationOptions!
}

type DomainResourcesResults {
  items: [Resource!]!
}

# Domain
input SearchDomainsOptions {
  query: String
  pagination: PaginationOptions!
}

type SearchDomainsResult {
  items: [Domain!]!
}

input CreateDomainPayload {
  name: String!
  key: String!
  description: String
}

input UpdateDomainPayload {
  name: String
  key: String
  description: String
}

type DeleteDomainResponse {
  _id: String!
  success: Boolean!
}

type Query {
  searchDomains(options: SearchDomainsOptions!): SearchDomainsResult!
  getDomainByKey(key: String!): Domain!
  Domains: [Domain!]
}

type Mutation {
  createDomain(payload: CreateDomainPayload!): Domain!
  updateDomain(id: String!, payload: UpdateDomainPayload!): Domain!
  deleteDomain(id: String!): DeleteDomainResponse!
}
